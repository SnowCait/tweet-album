service: tweet-album
frameworkVersion: '3'

provider:
  name: aws
  region: ap-northeast-1
  runtime: nodejs18.x
  memorySize: 128
  architecture: arm64
  httpApi:
    cors: true
    authorizers:
      twitterAuthorizer:
        type: request
        functionName: authorizer
        enableSimpleResponses: true
        resultTtlInSeconds: 3600
        identitySource:
          - $request.header.Authorization
  logs:
    httpApi: true
    frameworkLambda: true
  logRetentionInDays: 30
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [ AlbumsTable, Arn ]
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource:
            - Fn::Sub: ${UsersTable.Arn}/index/*
  environment:
    NODE_OPTIONS: --experimental-fetch
    secret_id: TweetAlbum
    users_table:
      Ref: UsersTable
    albums_table:
      Ref: AlbumsTable

functions:
  authorizer:
    handler: handler.authorizer
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: get
  auth:
    handler: handler.auth
    layers:
      - arn:aws:lambda:ap-northeast-1:133490724326:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:2
    events:
      - httpApi:
          method: POST
          path: /auth
  showMe:
    handler: handler.showMe
    layers:
      - arn:aws:lambda:ap-northeast-1:133490724326:layer:AWS-Parameters-and-Secrets-Lambda-Extension-Arm64:2
    events:
      - httpApi:
          method: GET
          path: /users/me
          authorizer:
            name: twitterAuthorizer
  showUserByScreenName:
    handler: handler.showUserByScreenName
    events:
      - httpApi:
          method: GET
          path: /users/by/{screenName}
  createAlbum:
    handler: handler.createAlbum
    events:
      - httpApi:
          method: POST
          path: /albums
          authorizer:
            name: twitterAuthorizer
  listAlbums:
    handler: handler.listAlbums
    events:
      - httpApi:
          method: GET
          path: /users/{userId}/albums
  updateAlbums:
    handler: handler.updateAlbums
    events:
      - eventBridge:
          schedule: rate(1 hour)
  showAlbum:
    handler: handler.showAlbum
    events:
      - httpApi:
          method: GET
          path: /albums/{albumId}
          authorizer:
            name: twitterAuthorizer
  showUserAlbum:
    handler: handler.showUserAlbum
    events:
      - httpApi:
          method: GET
          path: /users/{userId}/albums/{albumId}
  deleteAlbum:
    handler: handler.deleteAlbum
    events:
      - httpApi:
          method: DELETE
          path: /albums/{albumId}
          authorizer:
            name: twitterAuthorizer
  cacheAlbum:
    handler: handlers/streams.cacheAlbum
    timeout: 60
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ AlbumsTable, StreamArn ]

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users-${sls:stage}
        AttributeDefinitions:
          - AttributeName: twitterUserId
            AttributeType: S
          - AttributeName: twitterScreenName
            AttributeType: S
        KeySchema:
          - AttributeName: twitterUserId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: screenName-index
            KeySchema:
              - AttributeName: twitterScreenName
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AlbumsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-albums-${sls:stage}
        AttributeDefinitions:
          - AttributeName: twitterUserId
            AttributeType: S
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: twitterUserId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: deletionTime
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
